#+title: Emacs-lisp

* Uvod
Prema emacs-lisp tutorialu dobivenom s Emacs-om (=<SPC>hi= ): *Emacs Lisp Intro* /A simple introduction to Emacs Lisp programming/

Lisp programi se sastoje od izraza (eng. /expressions/) koji su popisi atoma ili samotni atomi. Popisi mogu biti prazni (=()=) i tada su iztoznačni sa simbolom ~nil~ što je ekvivalent simbolima /false/ i /none/ u ostalim programskim jezicima. Atomi mogu biti više-slovni simboli poput ~org-insert-item~ ili jednoslovni simboli poput ~+~ ili niske slovnih znakova okruženih dvostrukim navodnicima ili brojevi. Brojevi i niske evaluiraju sami sebe, a ostali simbol pri evaluaciji vraćaju svoju uparenu (povezanu) vrijednost.

Komentari se u lispu započinju s ~;~.

* Popisi
Emacs-lisp se sastoji od ~listi~, a one se pak sastoje od atoma. Atomi mogu biti /simboli/, /niske/, /brojevi/, /funkcije/ ili /liste/.

Sintaksa je sljedeća:
#+begin_src emacs-lisp :tangle no
'(stavka1 stavka2 stavka3)
(set 'brojka '2)
(/ (+ 3 3) brojka)
#+end_src

* Evaluacija
+ popisi se ispisuju unutar zagrada
+ popisi sadrže atome razdijeljene razmakom (broj razmaka ili proreda nije bitan)
+ simboli se evaluiraju komandom ~eval-last-sexp~ (=<C-x><C-e>=) tako da se kursor postavi iza ili na kraj simbola koji se želi interpretirati
  + ako se pred zagradu (ili bilo koji simbol) stavi apostrof ~'~, tada se simbol ne evaluira (interpretira) već samo proslijeđuje, a u suprotnom se uvijek evaluira i dalje se proslijeđuje isključivo rezultat te evaluacije
  + prilikom evaluacije popisa očekuje se kako je prvi atom u popisu simbol upućen na nekakvu fukciju, dok ostali atomi služe kao argumenti
  + popisi se evaluiraju krenuvši od najunutarnijeg popisa, prema van

* Varijable
Varijablama se vrijednost zadaje preddefiniranim simbolom ~set~. Kako bi se imenu varijable pripisala vrijednost varijable oba atoma moraju biti prefiksirana apostrofom ~'~ (u suprotnom bi se evaluirala)
+ komanda ~setq~ zaobilazi taj zahtijev za prefiksom pred imenom (*q* stoji za /quoted/) i omogućava definiranje više varijabli odjednom:
  #+begin_src emacs-lisp :tangle no
(setq brojke '(1 2 3) slova '(A B C))
  #+end_src

* Funkcije
Kada god se evaluiraju izrazi, očekuje se kako će prvi element biti funkcija. Evaluacija funkcija može biti automatska - kao kod davanja komandi prilikom uređivanja teksta, npr. =self-insert-command= - ili ručno pokretana (=<C-c><C-e>=).

Postoje funkcije ugrađene u Emacs poput onih za baratanje bufferima i datotekama.
+ =(buffer-name)= i =(buffer-file-name)= dohvaćaju nazive buffera i datoteka. Buffer se obično naziva po datoteci an naziv datoteke je obično putanja do te datoteke.
+ =(current-buffer)=, =(other-buffer)= te =(switch-to-buffer)= i =(set-buffer)= su funkcije za dohvaćanje otvorenih urednika, a funkcije ~buffer-size~, ~point~ i ~point-min~ i ~point-max~ su funkcije za dohvaćanje podataka o dohvaćenim bufferima.
  #+begin_src emacs-lisp
(switch-to-buffer (other-buffer (current-buffer) t))

(message "Kursor se trenutno nalazi na %d slovnom znaku od ukupno %d." (point) (buffer-size))
  #+end_src
+ funkcije se definiraju pomoću komande ~defun~ koja prima pet mogućih argumenata
  1. ime funkcije
  2. popis imena argumenata
  3. dokumentaciju o funkciji
  4. izraz koji čini funkciju interaktivnom (opcionalno)
     - funkcija se čini interaktivnom tako da se u njenoj definiciji kao četvrti argument doda popis koji započinje riječju ~interactive~ i slijedi ju popis argumenata za opcije (Emacs ima preddefiniranih preko 20 opcija):
       - ="p"= stoji za /prefiks/ i znači da funkcija treba rabiti prethodno proslijeđeni argument i tada se može u Emacsu rabiti kroz =<C-u>{argument}<M-x>{ime-funkcije}= shemu
       - ="b"= se odnosi na ime buffera
       - ="f"= se odnosi na naziv datoteke
       - ="r"= se odnosi na položaj kursora u dokumentu
  5. tijelo funkcije ispisano unutar zagrada

+ funkcije se pozivaju tako da ih se postavi kao prvu stavku Lisp popisa
 #+begin_src emacs-lisp
 (setq counter 0)
 (defun increase (count) "Increase the count by one." (setq counter (+ count 1)))

 counter
 (increase counter)
 counter
 #+end_src

+ komanda ~let~ je za definiranje funkcija sa varijablama unutar lokalnog /scope/-a. To je nužno raditi kod varijabli definiranih unutar definicija funkcija kako ne bi došlo do neželjenih /side-effect/-a ili brkanja lončića prilikom izvršavanja funkcija
  - lokalne varijable se definiraju tako da se komandi ~let~ proslijedi popis ili naziva vaijabli kojima će se automatski pripojiti vrijednost ~nil~, ili parova =({ime} {vrijednost})= pisanih kao /tuple/-e unutar zagrada
    #+begin_src emacs-lisp
  (let ((voće "bananu") (povrće "paprike") ništo (brojka 3)) (message "Volim jesti %s sa %d %s, a najdraža rijeka mi je %s." voće brojka povrće ništo))
    #+end_src

+ dodatna posebna forma koje se rabi u definicijama funkcija je ~if~ forma.
  #+begin_src emacs-lisp
(if (> 5 4) ; ovo je uvijet
    (message "Pet je veće od četiri.") ; ovo je dio koji se izvršava ako je uvijet istinit
    (message "Bogzna što se događa.") ; ovo je "else" dio
)
(if 0 (message "Ideš! Samo ~nil~ je /false/."))
#+end_src

+ posljednja posebna forma koju će se ovdje predstaviti je ~save-excursion~ i služi za spremanje položaja miša kako bi se po želji moglo vratiti na taj položaj.

  Je li stvar ovako brža? Ili je ovako brža? Svuda zapinje koliko vidi. Što ako se Eamcsov prozor smjesti na monitor manje rezolucije? Onda brže i bolje radi... Možda bih trebao updateati drivere na WSL-u... Ne znam kakvog to ima smisla.
